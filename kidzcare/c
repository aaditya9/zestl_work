
#import update_appointment as UA
import common as CM
import login1 as LL
import urllib2
import json
businessID = LL.zbotID

# zviceID = 'WH4ULS9BHSAKZ'
# EYP / EYP\:\ Academic\ and \ Activity\ Calendar /
cardname = "Calendar new"
decurl = "http://twig.me/v1/push/dectest/" + businessID
response = urllib2.urlopen(decurl)
html = response.read()
decTag = json.loads(html)['decTagID']

errorFile = "saptpadi_UCG.txt"

def create_events(body, headers, businessID, calendarID):
    return LL.invoke_rest('POST', LL.BASE_URL + businessID + '/calendars/' + calendarID + '/events', json.dumps(body),
                          headers)



def generate_events(start,end,doctor):
        print('Control in Event function now')
        jsondata = CM.getBaseStructure(businessID, headers1, LL.BASE_URL)
        #   print  jsondata

        for card in jsondata['data']['elements']:
            if cardname == card['title']:
                calendarID = card['cardID']
                print calendarID
                calendarID = str(calendarID)

        parseResults = ""
        counter = 0
        if parseResults == "errors":
            print "File has encoding errors"
        else:
                    method = "POST"
                    pid = ""
                    counter = counter + 1
                    eventTitle = ""
                    desc ="Doctor not available"
                    start = start
                    end = end
                    remind = 0
                    repeat = None
                    self = 'Yes'
                    allDay = 'No'
                    colour = '#F44336'
                    loc = ""
                    remind_2 = 0
                    comm_pref_reminder = 'FALSE'
                    publish_draft = 'Save & Publish'
                    occur = ''
                    tag = ""
                    RequestBody = {"Title": eventTitle,
                                   "StartDateTime": start,
                                   "EndDateTime": end,
                                   "Color": colour,
                                   "Description": desc,
                                   "PublishAction": publish_draft,
                                   "Tags": tag,  # doc name
                                   "AllDay": allDay,
                                   "RepeatEvent": repeat,
                                   "Occurrences": occur,
                                   "Location": loc,
                                   "Timezone": "Asia/Kolkata",
                                   "RemindCommPref": comm_pref_reminder,
                                   "SelfRSVP": '',
                                   "MaxAttendees": 0,
                                   "NotifyRSVPStatusToAdmin": "true",
                                   "NotifyRSVPStatusToOperator": "true",
                                   "OwnerID": "",
                                   "EventID": "",
                                   "categorytype": "CalendarEvent",
                                   "PreReminder2": {"CustomMessage": "", "ReminderType": "PRE", "ReminderOffset": ""},
                                   "PreReminder1": {"CustomMessage": "", "ReminderType": "POST", "ReminderOffset": "",
                                                    "ActionCardID": ""},
                                   "PostReminder1": {"CustomMessage": "", "ReminderType": "PRE",
                                                     "ReminderOffset": remind,
                                                     "ActionCardID": ""},
                                   "ReminderDetails": {"PreReminder1": "", "PreReminder2": "", "PostReminder1": ""},
                                   "ModerateRSVP": "true",
                                   "IgnoreGuestCount": "true",
                                   "MaxGuestCount": "",
                                   "ShowOnBehalfOf": "false",
                                   "ZviceID": decTag,
                                   "CalendarID": calendarID,
                                   }

                    response = create_events(RequestBody, headers1, businessID, calendarID)

                        #  print response
                    result = json.loads(response['reply'])
                    EventID = result['cardid']
                    u_email=""
                    print ('USERID are not present so Creating new user \n')
                    json_user_tagid = CM.add_user_InBusiness(businessID, doctor, u_email, headers1, LL.BASE_URL)

                    json_user_tagid = json.loads(json_user_tagid)
                    zviceID = json_user_tagid['data']['usertagid']  # usertagid


                    rr = CM.patientinfo(calendarID, businessID, zviceID, headers1, EventID, LL.BASE_URL)

                    print 'Event gets generated !!\n'
                    print 'Event ID:', EventID
                    print 'Counter', counter
                    print "==========================="
                    print rr








def mainworkflow(body, h1, B_URL):
    global BASE_URL
    global headers1
    BASE_URL = B_URL
    headers1 = h1

    doc_start_time=0
    doc_del_time=0

#body=json.loads(r'{"Cmd":"form-submit","BusinessTag":"WH4ULS9BHSAKZ","FormID":"24204","FormTitle":"Doctor Master",
    # "FormSubmissionID":24207,
    # "FormData":{"Doctors":"D6","Center":"Burlington,NC","Start Date":"2018-05-22","End Date":"2018-05-22","Start Time":"16:30:00","End Time":"17:00:00","Monday":"false","Tuesday":"false","Wednesday":"false","Thursday":"false","Friday":"false"},"SubmittedBy":"FX5283PU679LC","tags":[],"url_params":{"users":"{\"selected\":\"FJBSBPYQMRZZN\"}"}}')
    if body['Cmd'] == "form-submit":
        doc_start_date=body['FormData']['Start Date']
        doc_end_date=body['FormData']['End Date']
        doc_start_time=body['FormData']['Start Time']
        doc_end_time=body['FormData']['End Time']
        center=body['FormData']['Center']
        doctor=body['FormData']['Doctors']

    start=str(doc_start_date )+" " +str(doc_start_time)
    end=str(doc_end_date)+ " " + str(doc_end_time)
    print  doc_del_time
    print  doc_start_time

    new_start= str(doc_start_date) + " " + str('00:01:00')
    new_end=str(doc_end_date) + " " + str('23:59:00')


    generate_events(new_start,start,doctor)
    generate_events(end,new_end,doctor)


   # centre_list={'Burlignton': 'Text card 1', 'Spring Lake': 'Text card 2','Wilmington': 'Text card 3', 'Morrisville': 'Text card 4', 'Hope Mills': 'Text card 5' }

    # UA.main()   # calling main function assigning appointment
